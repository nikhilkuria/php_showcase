HttpKernelInterface
    - has a method handle
        - responsible for converting request to response

Flow of the web/app.php

##Create an AppKernel first

AppKernel
    - Class specific to the project
    - Load Bundles
    - 2 constructor params
        - name of the environment
            - the name passed is used to load the environment specific configuration

                  public function registerContainerConfiguration(LoaderInterface $loader)
                  {
                      $loader->load($this->getRootDir().'/config/config_'.$this->getEnvironment().'.yml');
                  }

        - debug mode or not


##Create a Request object

Using the superglobals in PHP
    - read more http://php.net/manual/en/language.variables.superglobals.php

##Call the handle method of AppKernel (initialize first)
    - the only param is the Request object
    - the handle() method is implemented in the kernel class, which is the parent of the AppKernel
    - ensure the kernel is booted. Booting includes
        - initiliaze the registered Bundles
            - bundles are returned as an array from the method registerBundles in AppKernel
        - initialize the service containers
            - after the bundles are initialized
            - the container is in its final form after the container 'compilation' phase
            - it gets dumped into two different formats
                - an XML file of all resolved definitions and parameters
                    - just like a service definition file
                - a PHP file ready to be used as the one and only service container in your application.
                    - a method for each service that can be requested
            - both files can be found in the cache folder (default is app/cache, but can be overridden using AppKernel->getCacheDir)

##Handling the actual request (after initializing)
    - The Kernel class has implemented the handle method
    - Which in turn takes help from HttpKernel to handle it.
    - The HttpKernel implements HttpKernelInterface and it truly knows how to convert a request to a response
        - HttpKernel does the handle using the method handleRaw
            - return $this->handleRaw($request, $type);
            - this is within a try catch block so that the exceptions are handled well
        - generally the response is generated by executing a controller
        - But any event listener that listens to the KernelEvents::REQUEST (kernel.request)
            event is allowed to generate a completely custom response
        - Registering Event Listeners
            - Internal events provided by symfony are registered in the KernelEvents class
                - http://api.symfony.com/3.2/Symfony/Component/HttpKernel/KernelEvents.html
            - Create a class with a method capable of handling the event
                - The name of the method
                    - Can either take the default name
                        - on + camel cased event name
                        - onKernelException
                        - onKernelRequest
                - The param of the method
                    - Each event has different event object
                        - GetResponseForExceptionEvent
                        - GetResponseEvent
                        - The list here http://api.symfony.com/3.2/Symfony/Component/HttpKernel/Event.html
            - Register it as a service within the service container
                - In addition to the class property, a tag property is added to note this is a listener
                - { name: kernel.event_listener, event: kernel.exception }
                    - says this is an event listener
                    - show which event to listen to, this case it is exception
                - if a method with non default name is used, use a method attribute as well

            - Read more here http://symfony.com/doc/current/event_dispatcher.html
            - Custom Events http://symfony.com/doc/current/components/event_dispatcher.html
            - Event listeners can be listed using
                - php bin/console debug:event-dispatcher
        - Registering Event Subscribers TODO
        - Important listeners listening to kernel.request
            - RouterListener
                - The RouterListener takes the path info from the Request object
                    and tries to match it to some known route.
                - It stores the result of the matching process in the Request object as attributes,
                    for instance the name of the controller
                        that corresponds to the route that was matched
                - Does not provide the event with a response object
            - Firewall
                - Used to deny access
                - Might set a response forcing the user to a login page.
        - Resolving the controller
            - The controller is resolved using the attributes set to the request object by the RouteListener
            - inside the handleRaw method, ControllerResolver is used to return the controller information
            - if the controller is an instance of ContainerAwareInterface,
                and in that case it calls setContainer() to provide the controller with the service container
        - Possible replacement of controller
            - This is provided by another event, KernelEvents::CONTROLLER
            - Any service listening to this event can override the controller using
                - $event->setController(...)
        - Collecting arguments for the controller
            - ControllerResolver which we had seen above is responsible for collecting the args
            - The args are fetched using reflection
        - Executing the controller
            - Execution happens within the handleRaw method within HttpKernel
                - $response = call_user_func_array($controller, $arguments)
                - remember the controller always returns a response object
                - if it does not, some part of the application should be able to convert it to a response object
        - Transforming the response
            - If the controller method returns a Response object, it can be directly used.
            - In other cases, the return 'object' need to be converted to a response object, ex: a twig template
            - KernelEvents::VIEW event is used for this.
            - Listeners to this event can call setResponse() on the GetResponseForControllerResultEvent object
                - read more, http://api.symfony.com/3.2/Symfony/Component/HttpKernel/Event/GetResponseForControllerResultEvent.html
        - Filter the response
            - In the end, right before returning the Response object
                as the final result of handling the given Request object,
                any listener for the KernelEvents::RESPONSE event (kernel.response) will be notified
            - Event listeners are allowed to modify the Response object and even to replace it completely


##Handling Exceptions
        - The entire request handling is wrapped in a try catch block
        - When an exception is thrown,
            - This method dispatches a KernelEvents::EXCEPTION event (kernel.exception)
                with a GetResponseForExceptionEvent object
            - Listeners for the kernel.exception event are allowed to:
                - Set a proper Response object for this specific exception.
                - Replace the original Exception object.
            - When none of the listeners has called setResponse() on the event object,
                the exception will be thrown (again), but this time it will not be handled automatically.
                So in case your display_errors PHP setting equals true, PHP just renders it as-is
            - In case any of the listeners has set a Response object,
                the HttpKernel examines this object in order to set the right status code for the response
                - we can enforce a certain status code to be used by adding an X-Status-Code header to the Response object

##Get result of the handle operation
    - the result of the handle operation is the Response object


##SubRequests
    - Two types of requests defined as constants in HttpKernelInterface
        - HttpKernelInterface::MASTER_REQUEST, the master request
        - HttpKernelInterface::SUB_REQUEST, a sub-request
    - The request type goes in as a param type in HttpKernel::handle() method
    - Sub-requests are used to isolate the creation of a Response object ??? TODO

